


Iterators in Python
Read
Discuss(20+)
Courses
Practice
An iterator in Python is an object that is used to iterate over iterable objects like lists,
 tuples, dicts, and sets. The Python iterators object is initialized using the iter() method.
  It uses the next() method for iteration.

__iter__(): The iter() method is called for the initialization of an iterator.
 This returns an iterator object
__next__(): The next method returns the next value for the iterable.
 When we use a for loop to traverse any iterable object, internally it uses
 the iter() method to get an iterator object, which further uses the next() method
 to iterate over. This method raises a StopIteration to signal the end of the iteration.
Python iter() Example

string = "GFG"
ch_iterator = iter(string)

print(next(ch_iterator))
print(next(ch_iterator))
print(next(ch_iterator))
Output :

G
F
G
Creating and looping over an iterator using iter() and next()
Below is a simple Python Iterator that creates an iterator type
 that iterates from 10 to a given limit.
For example, if the limit is 15, then it prints 10 11 12 13 14 15.
 And if the limit is 5,
 then it prints nothing.


# A simple Python program to demonstrate
# working of iterators using an example type
# that iterates from 10 to given value

# An iterable user defined type
class Test:

    # Constructor
    def __init__(self, limit):
        self.limit = limit

    # Creates iterator object
    # Called when iteration is initialized
    def __iter__(self):
        self.x = 10
        return self

    # To move to next element. In Python 3,
    # we should replace next with __next__
    def __next__(self):

        # Store current value ofx
        x = self.x

        # Stop iteration if limit is reached
        if x > self.limit:
            raise StopIteration

        # Else increment and return old value
        self.x = x + 1;
        return x

# Prints numbers from 10 to 15
for i in Test(15):
    print(i)

# Prints nothing
for i in Test(5):
    print(i)
Output: